import csv, sys, json, datetime
import random
import numpy as np
import pandas as pd
import os


'''
Simulate the metrics for a Reefer container according to the type of simulation.
Each simulation type is a different method.
The variables that changes are Co2, O2, power and temperature

'''

# Define constants

CO2_LEVEL = 4 # in percent
O2_LEVEL = 21 # in percent
NITROGEN_LEVEL = 0.78 # in percent
POWER_LEVEL= 2.7 # in kW
NB_RECORDS_IMPACTED = 7
MAX_RECORDS = 1000
DEFROST_LEVEL = 7   # Common timing periods were 6, 8, 12 and 24 hours.
METRIC_FREQUENCY = "5min"

SIGMA_BASE = 1
products = { 'P01': {'d':'Carrots','type':1,'T':4,'H':0.4},
            'P02': {'d':'Banana','type':2,'T':6,'H':0.6},
            'P03': {'d':'Salad','type':1,'T':4,'H':0.4},
            'P04': {'d':'Avocado','type':2,'T':6,'H':0.4}}
def _generateTimestamps(nb_records: int, start_time: datetime.datetime):
    '''
    Generate a timestamp column for a dataframe of results.

    Arguments:
        nb_records: Number of rows to generate
        start_time: Timestamp of first row. By convention, each subsequent
            row will be exactly METRIC_FREQUENCY minutes later.

    Returns a Pandas Series object, suitable for use as a column or index
    '''
    return pd.date_range(start_time, periods=nb_records, freq=METRIC_FREQUENCY)

def _generateStationaryCols(nb_records: int, cid: str, product_id: str):
    '''
    Generate the columns of the simulator output that can be generated by 
    stationary (stateless) processes.

    Note that the values of these columns may be replaced with values from
    a stateful generator later on in the data generation process.

    Arguments:
        nb_records: How many rows of data to generate
        cid: Container ID string
        content_type: integer key representing what's in the container, or
            None to have this function pick a random integer
        tgood: Target temperature

    Returns a Pandas dataframe with the indicated set of columns populated.
    '''
    print("Generate " + str(nb_records) + " records for " + products[product_id]['d'])
    cols = {}

    # Constant values
    cols["container_id"] = np.repeat(cid, nb_records)
    content_type = products[product_id]['type']
    cols["content_type"] = np.repeat(content_type, nb_records)
    cols["target_temperature"] = np.repeat( products[product_id]['T'], nb_records)
    cols["product_id"] =  np.repeat(product_id, nb_records)
    # Normally-distributed floating-point values
    cols["oxygen_level"] = np.random.normal(O2_LEVEL, SIGMA_BASE, size=nb_records)
    cols["carbon_dioxide_level"] = np.random.normal(CO2_LEVEL, SIGMA_BASE, size=nb_records)
    cols["nitrogen_level"] = np.random.normal(NITROGEN_LEVEL, SIGMA_BASE, size=nb_records)
    cols["humidity_level"] = np.random.normal(NITROGEN_LEVEL, SIGMA_BASE, size=nb_records)
    cols["vent_1"] = np.repeat(True,nb_records)
    cols["vent_2"] = np.repeat(True,nb_records)
    cols["vent_3"] = np.repeat(True,nb_records)
    cols["time_door_open"] = np.random.normal(1.0, SIGMA_BASE, size=nb_records)
    cols["temperature"] = np.random.normal(products[product_id]['T'], SIGMA_BASE, size=nb_records)
    cols["ambiant_temperature"] = np.random.normal(20, SIGMA_BASE, size=nb_records)
    cols["kilowatts"] = np.random.normal(POWER_LEVEL, SIGMA_BASE, size=nb_records)
    # Uniform values
    cols["defrost_cycle"] = np.random.randint(3,DEFROST_LEVEL, size = nb_records)
    cols["maintenance_required"] = np.repeat(0, nb_records)
    return pd.DataFrame(data = cols)


def _generateFaultyValue(df: pd.DataFrame, 
            nb_wrong_records:int = 10, nb_times:int = 2, 
            attribute:str = "kilowatts", 
            mean:float=0, sigma:float=1):
        initial_index = 0
        for time in range(0,nb_times):
            start_index = random.randint(initial_index, df[attribute].size - nb_wrong_records)
            for i in range(start_index, start_index + nb_wrong_records):
                df.at[i,attribute] = np.random.normal(mean, sigma)
            initial_index = start_index

class ReeferSimulator:
    # Constants used elsewhere in the application
    SIMUL_POWEROFF="poweroff"
    SIMUL_CO2="co2sensor"
    NORMAL="normal"
    # try to match the name in the database too
    COLUMN_NAMES = ["container_id", "measurement_time", "product_id",
                "temperature","target_temperature", "ambiant_temperature", 
                "kilowatts", "time_door_open",
                "content_type", "defrost_cycle",
                "oxygen_level", "nitrogen_level", "humidity_level","carbon_dioxide_level", 
                "vent_1", "vent_2", "vent_3", "maintenance_required"]


    def generateNormalRecords(self, cid: str = "101", 
                         nb_records: int = MAX_RECORDS, 
                         product_id: str = 'P02'
                         ):
        """
        Generate n records using clean telemetries

        Arguments:
            cid: Container ID
            nb_records: Number of records to generate
            product_id: product identified from the table above
        Returns a Pandas dataframe.
        """
        print("Generating records for normal behavior")
        df = _generateStationaryCols(nb_records, cid, product_id )
        df["measurement_time"] = _generateTimestamps(nb_records, datetime.datetime.today())
        return df[ReeferSimulator.COLUMN_NAMES]



    def generatePowerOffRecords(self,
                        cid: str = "101", 
                        nb_records: int = MAX_RECORDS, 
                        product_id: str = 'P02'):
        '''
        Generate n records for training and test set for the power off 
        simulation.
        Power off will be off for n records in the total n times withing the total records.

        Arguments:
            cid: Container ID
            nb_records: Number of records to generate
            tgood: Mean temperature to generate when power is NOT off
            content_type: ID of the type of stuff in the container, or None
                to choose a random number

        Returns a Pandas dataframe.
        '''
        print("Generating records for some poweroff")
        df = self.generateNormalRecords(cid,nb_records, product_id)
        _generateFaultyValue(df,40,2,"kilowatts",0,0)
        return df[ReeferSimulator.COLUMN_NAMES]


    def generatePowerOffTuples(self,
                               cid: str = "101",
                               nb_records: int = MAX_RECORDS,
                              product_id: str = 'P02'):
        '''
        Generate an array of tuples with reefer container values

        Returns an array of Python tuples, where the order of fields in the tuples
        the same as that in ReeferSimulator.COLUMN_NAMES.
        '''
        df = self.generatePowerOffRecords(cid, nb_records, product_id)
        return list(df.to_records(index=False))

    def generateCo2Records(self,
                    cid: str = "101", 
                    nb_records: int = MAX_RECORDS, 
                    product_id: str = 'P02'):
        '''
        Generate a dataframe of training data for CO2 sensor malfunctions.

        Returns a Pandas dataframe with the schema given in 
        ReeferSimulator.COLUMN_NAMES.
        '''
        print("Generating records for co2 sensor issue")
        df = self.generateNormalRecords(cid,nb_records, product_id)
        _generateFaultyValue(df,40,2,"carbon_dioxide_level", 3*CO2_LEVEL, 2*SIGMA_BASE)
        for i in range(0, df['carbon_dioxide_level'].size):
            currentCO2 = df.at[i,"carbon_dioxide_level"]
            df.at[i,"maintenance_required"] = 1 if (( currentCO2 > 3*CO2_LEVEL) or (currentCO2 < 0)) else 0
        return df[ReeferSimulator.COLUMN_NAMES]


    def generateCo2Tuples(self,
                    cid: str = "101", 
                    nb_records: int = MAX_RECORDS, 
                    product_id: str = 'P02'):
        '''
        Generate a dataframe of training data for CO2 sensor malfunctions.

        Arguments:

        Returns an array of Python tuples, where the order of fields in the tuples
        the same as that in ReeferSimulator.COLUMN_ORDER.
        '''
        df = self.generateCo2Records(cid, nb_records, product_id)
        return list(df.to_records(index=False))


if __name__ == '__main__':
    simul = ReeferSimulator()
    df1=simul.generatePowerOffRecords("C300",100,"P02")
    df2=simul.generateCo2Records("C300",200,"P02")
    df = df1.append(df2)
    for i in list(df.to_records()):
        print(i)
